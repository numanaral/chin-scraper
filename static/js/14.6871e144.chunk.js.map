{"version":3,"sources":["../node_modules/@material-ui/core/esm/colors/yellow.js","containers/ThemeToggle/ThemeToggle.js","containers/ThemeToggle/types.js","components/ClearLocalStorageButton/Lazy.js","routes/pages/Preferences.js","components/ContainerWithCenteredItems/types.js","components/ContainerWithCenteredItems/ContainerWithCenteredItems.js","components/Spacer/StyledWrapper.js","components/Spacer/Spacer.js","components/Spacer/types.js","components/List/Lazy.js","components/List/constants.js","../node_modules/@material-ui/lab/esm/ToggleButtonGroup/isValueSelected.js","../node_modules/@material-ui/lab/esm/ToggleButtonGroup/ToggleButtonGroup.js","../node_modules/@material-ui/lab/esm/ToggleButton/ToggleButton.js","components/Toggle/types.js","components/Toggle/Toggle.js","../node_modules/@material-ui/core/esm/Switch/Switch.js"],"names":["yellow","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","ThemeToggle","string","isRequired","func","theme","setTheme","Toggle","value","onChange","options","label","icon","color","style","loadable","ComingSoon","TooltipButton","tooltip","text","variant","PaletteIcon","onClick","noop","disabled","Switch","getPreferenceList","themeProps","type","itemTypes","SECTION_TITLE_WITH_DIVIDER","primaryText","ThemeIcon","secondaryAction","TranslateIcon","secondaryText","StorageIcon","LazyClearLocalStorageButton","SPACER","AnimationIcon","SadIcon","Preferences","props","PageContainer","ContainerWithCenteredItems","vertical","horizontal","Lazy","list","node","bool","StyledGrid","styled","Grid","$horizontal","$vertical","children","rest","defaultProps","StyledWrapper","span","$direction","$spacing","spacing","Spacer","direction","numberOrString","parseInt","SECTION_TITLE","DIVIDER","isValueSelected","candidate","undefined","Array","isArray","indexOf","ToggleButtonGroup","React","ref","classes","className","_props$exclusive","exclusive","_props$orientation","orientation","_props$size","size","other","_objectWithoutProperties","handleChange","event","buttonValue","newValue","index","slice","splice","concat","handleExclusiveChange","_extends","role","clsx","root","map","child","grouped","capitalize","selected","withStyles","display","borderRadius","shape","flexDirection","groupedHorizontal","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","groupedVertical","marginTop","borderTop","name","ToggleButton","_props$disabled","_props$disableFocusRi","disableFocusRipple","ButtonBase","focusRipple","isDefaultPrevented","typography","button","boxSizing","padding","border","fade","palette","action","active","backgroundColor","textDecoration","primary","width","alignItems","justifyContent","sizeSmall","fontSize","pxToRem","sizeLarge","toggleOptionItemType","any","toggleOptionsType","arrayOf","_","doesNotExist","elm","getElementFromElementOrType","_props$color","_props$edge","edge","thumb","edgeStart","edgeEnd","SwitchBase","checkedIcon","switchBase","input","checked","track","height","overflow","position","flexShrink","zIndex","verticalAlign","colorAdjust","marginRight","top","left","grey","transition","transitions","create","duration","shortest","transform","opacity","colorPrimary","main","hoverOpacity","common","black","white","colorSecondary","secondary","boxShadow","shadows"],"mappings":"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","file":"static/js/14.6871e144.chunk.js","sourcesContent":["var yellow = {\n  50: '#fffde7',\n  100: '#fff9c4',\n  200: '#fff59d',\n  300: '#fff176',\n  400: '#ffee58',\n  500: '#ffeb3b',\n  600: '#fdd835',\n  700: '#fbc02d',\n  800: '#f9a825',\n  900: '#f57f17',\n  A100: '#ffff8d',\n  A200: '#ffff00',\n  A400: '#ffea00',\n  A700: '#ffd600'\n};\nexport default yellow;","import React from 'react';\r\nimport { yellow } from '@material-ui/core/colors';\r\n\r\nimport Toggle from 'components/Toggle';\r\nimport { LightThemeIcon, DarkThemeIcon } from 'icons';\r\nimport { propTypes } from './types';\r\n\r\nconst ThemeToggle = ({ theme, setTheme }) => (\r\n\t<Toggle\r\n\t\tvalue={theme}\r\n\t\tonChange={setTheme}\r\n\t\toptions={[\r\n\t\t\t{\r\n\t\t\t\tvalue: 'dark',\r\n\t\t\t\tlabel: 'Dark',\r\n\t\t\t\ticon: <DarkThemeIcon color=\"primary\" />,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tvalue: 'light',\r\n\t\t\t\tlabel: 'Light',\r\n\t\t\t\ticon: <LightThemeIcon style={{ color: yellow[500] }} />,\r\n\t\t\t},\r\n\t\t]}\r\n\t/>\r\n);\r\n\r\nThemeToggle.propTypes = propTypes;\r\n\r\nexport default ThemeToggle;\r\n","import { func, string } from 'prop-types';\r\n\r\nconst propTypes = {\r\n\ttheme: string.isRequired,\r\n\tsetTheme: func.isRequired,\r\n};\r\n\r\nexport { propTypes };\r\n","import loadable from 'utils/loadable';\r\n\r\nexport default loadable(() => import('./index'), 'small');\r\n","import ContainerWithCenteredItems from 'components/ContainerWithCenteredItems';\r\nimport React from 'react';\r\nimport { Switch as MuiSwitch } from '@material-ui/core';\r\n\r\nimport {\r\n\tThemeIcon,\r\n\tStorageIcon,\r\n\tTranslateIcon,\r\n\tAnimationIcon,\r\n\tSadIcon,\r\n\tPaletteIcon,\r\n} from 'icons';\r\nimport LazyList from 'components/List/Lazy';\r\nimport { itemTypes, SPACER } from 'components/List/constants';\r\nimport ThemeToggle from 'containers/ThemeToggle';\r\nimport LazyClearLocalStorageButton from 'components/ClearLocalStorageButton/Lazy';\r\nimport TooltipButton from 'components/TooltipButton';\r\nimport { noop } from 'utils';\r\nimport PageContainer from '../PageContainer';\r\n\r\nconst ComingSoon = () => (\r\n\t<TooltipButton\r\n\t\ttooltip=\"Pick a color\"\r\n\t\ttext=\"Pick a color\"\r\n\t\tvariant=\"contained\"\r\n\t\tcolor=\"primary\"\r\n\t\ticon={PaletteIcon}\r\n\t\tonClick={noop}\r\n\t\tdisabled\r\n\t/>\r\n);\r\nconst Switch = () => <MuiSwitch disabled />;\r\n\r\nconst getPreferenceList = ({ themeProps }) => {\r\n\treturn [\r\n\t\t{\r\n\t\t\ttype: itemTypes.SECTION_TITLE_WITH_DIVIDER,\r\n\t\t\tprimaryText: 'VIEW SETTINGS',\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryText: 'Theme',\r\n\t\t\ticon: ThemeIcon,\r\n\t\t\t// TODO: If I decide to add redux, won't need this complication here\r\n\t\t\t// but it's not needed right now\r\n\t\t\tsecondaryAction: <ThemeToggle {...themeProps} />,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryText: 'Hanzi stroke color',\r\n\t\t\ticon: TranslateIcon,\r\n\t\t\tsecondaryAction: ComingSoon,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryText: 'Hanzi radical color',\r\n\t\t\ticon: TranslateIcon,\r\n\t\t\tsecondaryAction: ComingSoon,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryText: 'Reset settings',\r\n\t\t\tsecondaryText: 'NOTE: This will revert all the preference changes',\r\n\t\t\ticon: StorageIcon,\r\n\t\t\tsecondaryAction: LazyClearLocalStorageButton,\r\n\t\t},\r\n\t\tSPACER,\r\n\t\t{\r\n\t\t\ttype: itemTypes.SECTION_TITLE_WITH_DIVIDER,\r\n\t\t\tprimaryText: 'ANIMATIONS',\r\n\t\t\tsecondaryText: 'Disable/Modify animations',\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryText: 'Animations',\r\n\t\t\tsecondaryText: 'Turns on/off all the animations',\r\n\t\t\ticon: AnimationIcon,\r\n\t\t\tsecondaryAction: Switch,\r\n\t\t\tdisabled: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryText: 'Enough with the shaking!',\r\n\t\t\tsecondaryText: 'Turn off that stupid shaking animation plis',\r\n\t\t\ticon: SadIcon,\r\n\t\t\tsecondaryAction: Switch,\r\n\t\t\tdisabled: true,\r\n\t\t},\r\n\t];\r\n};\r\n\r\nconst Preferences = props => (\r\n\t<PageContainer>\r\n\t\t<ContainerWithCenteredItems vertical horizontal>\r\n\t\t\t<LazyList list={getPreferenceList(props)} />\r\n\t\t</ContainerWithCenteredItems>\r\n\t</PageContainer>\r\n);\r\n\r\nexport default Preferences;\r\n","import { bool, node } from 'prop-types';\r\n\r\nconst propTypes = {\r\n\tchildren: node.isRequired,\r\n\thorizontal: bool,\r\n\tvertical: bool,\r\n};\r\n\r\nconst defaultProps = {\r\n\thorizontal: true,\r\n\tvertical: false,\r\n};\r\n\r\nexport { propTypes, defaultProps };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { propTypes, defaultProps } from './types';\r\n\r\nconst StyledGrid = styled(Grid)`\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\t${({ $horizontal, $vertical }) => `\r\n\t\t${$horizontal && 'justify-content: center;'}\r\n\t\t${$vertical && 'height: 100%; align-items: center;'}\r\n\t`}\r\n`;\r\n\r\n/**\r\n * Centered Grid\r\n *\r\n * @component\r\n * @param {import('@material-ui/core').GridProps|import('react').HtmlHTMLAttributes}\r\n */\r\nconst ContainerWithCenteredItems = ({\r\n\tchildren,\r\n\thorizontal,\r\n\tvertical,\r\n\t...rest\r\n}) => (\r\n\t<StyledGrid $horizontal={horizontal} $vertical={vertical} {...rest}>\r\n\t\t{children}\r\n\t</StyledGrid>\r\n);\r\n\r\nContainerWithCenteredItems.propTypes = propTypes;\r\nContainerWithCenteredItems.defaultProps = defaultProps;\r\n\r\nexport default ContainerWithCenteredItems;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledWrapper = styled.span`\r\n\tdisplay: block;\r\n\twidth: 100%;\r\n\t${({ theme, $direction, $spacing }) => `\r\n\t\tmargin-${$direction}: ${theme.spacing($spacing)}px;\r\n\t`}\r\n`;\r\n\r\nexport default StyledWrapper;\r\n","import React from 'react';\r\nimport StyledWrapper from './StyledWrapper';\r\nimport { defaultProps, propTypes } from './types';\r\n\r\n/**\r\n * Element that adds margin to the given direction based on the\r\n * spacing amount. The amount is passed in to the spacing method\r\n * of Mui. By default 1-unit-spacing = 8px\r\n *\r\n * @example\r\n * ```js\r\n * <Spacer direction=\"right\" spacing=\"5\" />\r\n * ```\r\n *\r\n * @component\r\n */\r\nconst Spacer = ({ direction, spacing }) => (\r\n\t<StyledWrapper\r\n\t\t$direction={direction}\r\n\t\t$spacing={\r\n\t\t\t(typeof spacing === 'string' && parseInt(spacing, 10)) || spacing\r\n\t\t}\r\n\t/>\r\n);\r\n\r\nSpacer.propTypes = propTypes;\r\nSpacer.defaultProps = defaultProps;\r\n\r\nexport default Spacer;\r\n","import { direction, numberOrString } from 'components/types';\r\n\r\nconst propTypes = {\r\n\t/**\r\n\t * - Which direction do you want to apply margin to\r\n\t */\r\n\tdirection: direction.isRequired,\r\n\t/**\r\n\t * - The amount is passed in to the spacing method of Mui.\r\n\t * - By default 1-unit-spacing = 8px\r\n\t */\r\n\tspacing: numberOrString,\r\n};\r\nconst defaultProps = {\r\n\tspacing: 1,\r\n};\r\n\r\nexport { propTypes, defaultProps };\r\n","import loadable from 'utils/loadable';\r\n\r\nexport default loadable(() => import('./index'));\r\n","const itemTypes = {\r\n\tSECTION_TITLE: 'SectionTitle',\r\n\tSECTION_TITLE_WITH_DIVIDER: 'SectionTitleWithDivider',\r\n\tSPACER: 'Spacer',\r\n\tDIVIDER: 'Divider',\r\n};\r\n\r\nconst SPACER = {\r\n\ttype: itemTypes.SPACER,\r\n};\r\n\r\nexport { itemTypes, SPACER };\r\n","// Determine if the toggle button value matches, or is contained in, the\n// candidate group value.\nexport default function isValueSelected(value, candidate) {\n  if (candidate === undefined || value === undefined) {\n    return false;\n  }\n\n  if (Array.isArray(candidate)) {\n    return candidate.indexOf(value) >= 0;\n  }\n\n  return value === candidate;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport isValueSelected from './isValueSelected';\nimport { withStyles } from '@material-ui/core/styles';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the children. */\n    grouped: {},\n\n    /* Styles applied to the children if `orientation=\"horizontal\"`. */\n    groupedHorizontal: {\n      '&:not(:first-child)': {\n        marginLeft: -1,\n        borderLeft: '1px solid transparent',\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0\n      }\n    },\n\n    /* Styles applied to the children if `orientation=\"vertical\"`. */\n    groupedVertical: {\n      '&:not(:first-child)': {\n        marginTop: -1,\n        borderTop: '1px solid transparent',\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n      }\n    }\n  };\n};\nvar ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$exclusive = props.exclusive,\n      exclusive = _props$exclusive === void 0 ? false : _props$exclusive,\n      onChange = props.onChange,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"exclusive\", \"onChange\", \"orientation\", \"size\", \"value\"]);\n\n  var handleChange = function handleChange(event, buttonValue) {\n    if (!onChange) {\n      return;\n    }\n\n    var index = value && value.indexOf(buttonValue);\n    var newValue;\n\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  var handleExclusiveChange = function handleExclusiveChange(event, buttonValue) {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"group\",\n    className: clsx(classes.root, className, orientation === 'vertical' && classes.vertical),\n    ref: ref\n  }, other), React.Children.map(children, function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(classes.grouped, classes[\"grouped\".concat(capitalize(orientation))], child.props.className),\n      onChange: exclusive ? handleExclusiveChange : handleChange,\n      selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n      size: child.props.size || size\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   */\n  exclusive: PropTypes.bool,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The group orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * The size of the buttons.\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiToggleButtonGroup'\n})(ToggleButtonGroup);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, withStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      borderRadius: theme.shape.borderRadius,\n      padding: 11,\n      border: \"1px solid \".concat(fade(theme.palette.action.active, 0.12)),\n      color: fade(theme.palette.action.active, 0.38),\n      '&$selected': {\n        color: theme.palette.action.active,\n        backgroundColor: fade(theme.palette.action.active, 0.12),\n        '&:hover': {\n          backgroundColor: fade(theme.palette.action.active, 0.15)\n        },\n        '& + &': {\n          borderLeft: 0,\n          marginLeft: 0\n        }\n      },\n      '&$disabled': {\n        color: fade(theme.palette.action.disabled, 0.12)\n      },\n      '&:hover': {\n        textDecoration: 'none',\n        // Reset on mouse devices\n        backgroundColor: fade(theme.palette.text.primary, 0.05),\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        },\n        '&$disabled': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Styles applied to the `label` wrapper element. */\n    label: {\n      width: '100%',\n      // Ensure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: 7,\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: {\n      padding: 15,\n      fontSize: theme.typography.pxToRem(15)\n    }\n  };\n};\nvar ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      selected = props.selected,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"disableFocusRipple\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"]);\n\n  var handleChange = function handleChange(event) {\n    if (onClick) {\n      onClick(event, value);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes[\"size\".concat(capitalize(size))]),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    \"aria-pressed\": selected\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * If `true`, the button will be rendered in an active state.\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiToggleButton'\n})(ToggleButton);","import { shape, string, bool, arrayOf, func, any } from 'prop-types';\r\n\r\nimport { icon, size } from 'components/types';\r\n\r\nconst toggleOptionItemType = shape({\r\n\t// eslint-disable-next-line react/forbid-prop-types\r\n\tvalue: any.isRequired,\r\n\tlabel: string.isRequired,\r\n\ticon,\r\n\tdisabled: bool,\r\n}).isRequired;\r\n\r\nconst toggleOptionsType = arrayOf(toggleOptionItemType);\r\n\r\nconst propTypes = {\r\n\tvalue: any.isRequired,\r\n\tonChange: func.isRequired,\r\n\t/**\r\n\t * - [\r\n\t *     {\r\n\t *         value: 'dark',\r\n\t *         label: 'Dark',\r\n\t *         icon: <DarkThemeIcon color=\"primary\" />,\r\n\t *     },\r\n\t *     {\r\n\t *         value: 'light',\r\n\t *         label: 'Light',\r\n\t *         icon: <LightThemeIcon style={{ color: yellow[500] }} />,\r\n\t *     },\r\n\t * ]\r\n\t */\r\n\toptions: toggleOptionsType.isRequired,\r\n\texclusive: bool,\r\n\tsize,\r\n};\r\n\r\nconst defaultProps = {\r\n\texclusive: true,\r\n\tsize: 'small',\r\n};\r\n\r\nexport { toggleOptionItemType, toggleOptionsType, propTypes, defaultProps };\r\n","import React from 'react';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport Spacer from 'components/Spacer';\r\nimport { getElementFromElementOrType } from 'utils/react';\r\nimport { doesNotExist } from 'utils';\r\nimport { propTypes, defaultProps } from './types';\r\n\r\n/**\r\n * Toggle for a button groups.\r\n *\r\n * @example\r\n * ```js\r\n * <Toggle\r\n * \tvalue={theme}\r\n * \tonChange={setTheme}\r\n * \toptions={[\r\n * \t\t{\r\n * \t\t\tvalue: 'dark',\r\n * \t\t\tlabel: 'Dark',\r\n * \t\t\ticon: <DarkThemeIcon color=\"primary\" />,\r\n * \t\t},\r\n * \t\t{\r\n * \t\t\tvalue: 'light',\r\n * \t\t\tlabel: 'Light',\r\n * \t\t\ticon: <LightThemeIcon style={{ color: yellow[500] }} />,\r\n * \t\t},\r\n * \t]}\r\n * />\r\n * ```\r\n *\r\n * @component\r\n * @param {...(import('@material-ui/lab').ToggleButtonGroupProps)}\r\n */\r\nconst Toggle = ({ value, onChange, options, size, ...rest }) => {\r\n\tconst handleOnChange = (_, newValue) => {\r\n\t\tif (doesNotExist(newValue) || value === newValue) return;\r\n\t\tonChange(newValue);\r\n\t};\r\n\treturn (\r\n\t\t<ToggleButtonGroup value={value} onChange={handleOnChange} {...rest}>\r\n\t\t\t{options.map(elm => (\r\n\t\t\t\t<ToggleButton\r\n\t\t\t\t\tvalue={elm.value}\r\n\t\t\t\t\tkey={elm.value}\r\n\t\t\t\t\tdisabled={elm.disabled}\r\n\t\t\t\t\tsize={size}\r\n\t\t\t\t>\r\n\t\t\t\t\t{elm.icon && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t{getElementFromElementOrType(elm.icon)}\r\n\t\t\t\t\t\t\t<Spacer direction=\"right\" />\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{elm.label}\r\n\t\t\t\t</ToggleButton>\r\n\t\t\t))}\r\n\t\t</ToggleButtonGroup>\r\n\t);\r\n};\r\n\r\nToggle.propTypes = propTypes;\r\nToggle.defaultProps = defaultProps;\r\n\r\nexport default Toggle;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n// @inheritedComponent IconButton\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      width: 34 + 12 * 2,\n      height: 14 + 12 * 2,\n      overflow: 'hidden',\n      padding: 12,\n      boxSizing: 'border-box',\n      position: 'relative',\n      flexShrink: 0,\n      zIndex: 0,\n      // Reset the stacking context.\n      verticalAlign: 'middle',\n      // For correct alignment with the text.\n      '@media print': {\n        colorAdjust: 'exact'\n      }\n    },\n\n    /* Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: {\n      marginLeft: -8\n    },\n\n    /* Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: {\n      marginRight: -8\n    },\n\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1,\n      // Render above the focus ripple.\n      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n      transition: theme.transitions.create(['left', 'transform'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&$checked': {\n        transform: 'translateX(20px)'\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        opacity: 0.5\n      },\n      '&$disabled + $track': {\n        opacity: theme.palette.type === 'light' ? 0.12 : 0.1\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.primary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.secondary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      width: 40,\n      height: 24,\n      padding: 7,\n      '& $thumb': {\n        width: 16,\n        height: 16\n      },\n      '& $switchBase': {\n        padding: 4,\n        '&$checked': {\n          transform: 'translateX(16px)'\n        }\n      }\n    },\n\n    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: {},\n\n    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n    disabled: {},\n\n    /* Styles applied to the internal SwitchBase component's input element. */\n    input: {\n      left: '-100%',\n      width: '300%'\n    },\n\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: {\n      boxShadow: theme.shadows[1],\n      backgroundColor: 'currentColor',\n      width: 20,\n      height: 20,\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the track element. */\n    track: {\n      height: '100%',\n      width: '100%',\n      borderRadius: 14 / 2,\n      zIndex: -1,\n      transition: theme.transitions.create(['opacity', 'background-color'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n      opacity: theme.palette.type === 'light' ? 0.38 : 0.3\n    }\n  };\n};\nvar Switch = /*#__PURE__*/React.forwardRef(function Switch(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$edge = props.edge,\n      edge = _props$edge === void 0 ? false : _props$edge,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"edge\", \"size\"]);\n\n  var icon = /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.thumb\n  });\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.root, className, {\n      'start': classes.edgeStart,\n      'end': classes.edgeEnd\n    }[edge], size === \"small\" && classes[\"size\".concat(capitalize(size))])\n  }, /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    icon: icon,\n    checkedIcon: icon,\n    classes: {\n      root: clsx(classes.switchBase, classes[\"color\".concat(capitalize(color))]),\n      input: classes.input,\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    ref: ref\n  }, other)), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.track\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the switch.\n   * `small` is equivalent to the dense switch styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSwitch'\n})(Switch);"],"sourceRoot":""}