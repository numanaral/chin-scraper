{"version":3,"sources":["routes/pages/DevSettings.js","components/ContainerWithCenteredItems/types.js","components/ContainerWithCenteredItems/ContainerWithCenteredItems.js","components/Spacer/StyledWrapper.js","components/Spacer/Spacer.js","components/Spacer/types.js","components/List/Lazy.js","components/List/constants.js","../node_modules/@material-ui/lab/esm/ToggleButtonGroup/isValueSelected.js","../node_modules/@material-ui/lab/esm/ToggleButtonGroup/ToggleButtonGroup.js","../node_modules/@material-ui/lab/esm/ToggleButton/ToggleButton.js","components/Toggle/types.js","components/Toggle/Toggle.js"],"names":["PREFERENCE_LIST","type","itemTypes","SECTION_TITLE_WITH_DIVIDER","primaryText","icon","AnalyticsIcon","secondaryAction","useIsAnalyticsEnabled","analyticsIsEnabled","setAnalyticsIsEnabled","value","onChange","options","label","DevSettings","vertical","horizontal","list","node","isRequired","bool","StyledGrid","styled","Grid","$horizontal","$vertical","ContainerWithCenteredItems","children","rest","defaultProps","StyledWrapper","span","theme","$direction","$spacing","spacing","Spacer","direction","numberOrString","parseInt","loadable","SECTION_TITLE","SPACER","DIVIDER","isValueSelected","candidate","undefined","Array","isArray","indexOf","ToggleButtonGroup","React","props","ref","classes","className","_props$exclusive","exclusive","_props$orientation","orientation","_props$size","size","other","_objectWithoutProperties","handleChange","event","buttonValue","newValue","index","slice","splice","concat","handleExclusiveChange","_extends","role","clsx","root","map","child","grouped","capitalize","selected","withStyles","display","borderRadius","shape","flexDirection","groupedHorizontal","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","groupedVertical","marginTop","borderTop","name","ToggleButton","_props$disabled","disabled","_props$disableFocusRi","disableFocusRipple","onClick","ButtonBase","focusRipple","isDefaultPrevented","typography","button","boxSizing","padding","border","fade","palette","action","active","color","backgroundColor","textDecoration","text","primary","width","alignItems","justifyContent","sizeSmall","fontSize","pxToRem","sizeLarge","toggleOptionItemType","any","string","toggleOptionsType","arrayOf","Toggle","func","_","doesNotExist","elm","getElementFromElementOrType"],"mappings":"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","file":"static/js/15.34f1420c.chunk.js","sourcesContent":["import ContainerWithCenteredItems from 'components/ContainerWithCenteredItems';\r\nimport React from 'react';\r\n\r\nimport { AnalyticsIcon } from 'icons';\r\nimport LazyList from 'components/List/Lazy';\r\nimport { itemTypes } from 'components/List/constants';\r\nimport Toggle from 'components/Toggle';\r\nimport useIsAnalyticsEnabled from 'hooks/useIsAnalyticsEnabled';\r\nimport PageContainer from '../PageContainer';\r\n\r\nconst AnalyticsToggle = () => {\r\n\tconst [analyticsIsEnabled, setAnalyticsIsEnabled] = useIsAnalyticsEnabled();\r\n\r\n\treturn (\r\n\t\t<Toggle\r\n\t\t\tvalue={analyticsIsEnabled}\r\n\t\t\tonChange={setAnalyticsIsEnabled}\r\n\t\t\toptions={[\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue: true,\r\n\t\t\t\t\tlabel: 'Enabled',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue: false,\r\n\t\t\t\t\tlabel: 'Disabled',\r\n\t\t\t\t},\r\n\t\t\t]}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nconst PREFERENCE_LIST = [\r\n\t{\r\n\t\ttype: itemTypes.SECTION_TITLE_WITH_DIVIDER,\r\n\t\tprimaryText: 'DEV SETTINGS',\r\n\t},\r\n\t{\r\n\t\tprimaryText: 'Analytics',\r\n\t\ticon: AnalyticsIcon,\r\n\t\tsecondaryAction: AnalyticsToggle,\r\n\t},\r\n];\r\n\r\nconst DevSettings = () => (\r\n\t<PageContainer>\r\n\t\t<ContainerWithCenteredItems vertical horizontal>\r\n\t\t\t<LazyList list={PREFERENCE_LIST} />\r\n\t\t</ContainerWithCenteredItems>\r\n\t</PageContainer>\r\n);\r\n\r\nexport default DevSettings;\r\n","import { bool, node } from 'prop-types';\r\n\r\nconst propTypes = {\r\n\tchildren: node.isRequired,\r\n\thorizontal: bool,\r\n\tvertical: bool,\r\n};\r\n\r\nconst defaultProps = {\r\n\thorizontal: true,\r\n\tvertical: false,\r\n};\r\n\r\nexport { propTypes, defaultProps };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { propTypes, defaultProps } from './types';\r\n\r\nconst StyledGrid = styled(Grid)`\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\t${({ $horizontal, $vertical }) => `\r\n\t\t${$horizontal && 'justify-content: center;'}\r\n\t\t${$vertical && 'height: 100%; align-items: center;'}\r\n\t`}\r\n`;\r\n\r\n/**\r\n * Centered Grid\r\n *\r\n * @component\r\n * @param {import('@material-ui/core').GridProps|import('react').HtmlHTMLAttributes}\r\n */\r\nconst ContainerWithCenteredItems = ({\r\n\tchildren,\r\n\thorizontal,\r\n\tvertical,\r\n\t...rest\r\n}) => (\r\n\t<StyledGrid $horizontal={horizontal} $vertical={vertical} {...rest}>\r\n\t\t{children}\r\n\t</StyledGrid>\r\n);\r\n\r\nContainerWithCenteredItems.propTypes = propTypes;\r\nContainerWithCenteredItems.defaultProps = defaultProps;\r\n\r\nexport default ContainerWithCenteredItems;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledWrapper = styled.span`\r\n\tdisplay: block;\r\n\twidth: 100%;\r\n\t${({ theme, $direction, $spacing }) => `\r\n\t\tmargin-${$direction}: ${theme.spacing($spacing)}px;\r\n\t`}\r\n`;\r\n\r\nexport default StyledWrapper;\r\n","import React from 'react';\r\nimport StyledWrapper from './StyledWrapper';\r\nimport { defaultProps, propTypes } from './types';\r\n\r\n/**\r\n * Element that adds margin to the given direction based on the\r\n * spacing amount. The amount is passed in to the spacing method\r\n * of Mui. By default 1-unit-spacing = 8px\r\n *\r\n * @example\r\n * ```js\r\n * <Spacer direction=\"right\" spacing=\"5\" />\r\n * ```\r\n *\r\n * @component\r\n */\r\nconst Spacer = ({ direction, spacing }) => (\r\n\t<StyledWrapper\r\n\t\t$direction={direction}\r\n\t\t$spacing={\r\n\t\t\t(typeof spacing === 'string' && parseInt(spacing, 10)) || spacing\r\n\t\t}\r\n\t/>\r\n);\r\n\r\nSpacer.propTypes = propTypes;\r\nSpacer.defaultProps = defaultProps;\r\n\r\nexport default Spacer;\r\n","import { direction, numberOrString } from 'components/types';\r\n\r\nconst propTypes = {\r\n\t/**\r\n\t * - Which direction do you want to apply margin to\r\n\t */\r\n\tdirection: direction.isRequired,\r\n\t/**\r\n\t * - The amount is passed in to the spacing method of Mui.\r\n\t * - By default 1-unit-spacing = 8px\r\n\t */\r\n\tspacing: numberOrString,\r\n};\r\nconst defaultProps = {\r\n\tspacing: 1,\r\n};\r\n\r\nexport { propTypes, defaultProps };\r\n","import loadable from 'utils/loadable';\r\n\r\nexport default loadable(() => import('./index'));\r\n","const itemTypes = {\r\n\tSECTION_TITLE: 'SectionTitle',\r\n\tSECTION_TITLE_WITH_DIVIDER: 'SectionTitleWithDivider',\r\n\tSPACER: 'Spacer',\r\n\tDIVIDER: 'Divider',\r\n};\r\n\r\nconst SPACER = {\r\n\ttype: itemTypes.SPACER,\r\n};\r\n\r\nexport { itemTypes, SPACER };\r\n","// Determine if the toggle button value matches, or is contained in, the\n// candidate group value.\nexport default function isValueSelected(value, candidate) {\n  if (candidate === undefined || value === undefined) {\n    return false;\n  }\n\n  if (Array.isArray(candidate)) {\n    return candidate.indexOf(value) >= 0;\n  }\n\n  return value === candidate;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport isValueSelected from './isValueSelected';\nimport { withStyles } from '@material-ui/core/styles';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the children. */\n    grouped: {},\n\n    /* Styles applied to the children if `orientation=\"horizontal\"`. */\n    groupedHorizontal: {\n      '&:not(:first-child)': {\n        marginLeft: -1,\n        borderLeft: '1px solid transparent',\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0\n      }\n    },\n\n    /* Styles applied to the children if `orientation=\"vertical\"`. */\n    groupedVertical: {\n      '&:not(:first-child)': {\n        marginTop: -1,\n        borderTop: '1px solid transparent',\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n      }\n    }\n  };\n};\nvar ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$exclusive = props.exclusive,\n      exclusive = _props$exclusive === void 0 ? false : _props$exclusive,\n      onChange = props.onChange,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"exclusive\", \"onChange\", \"orientation\", \"size\", \"value\"]);\n\n  var handleChange = function handleChange(event, buttonValue) {\n    if (!onChange) {\n      return;\n    }\n\n    var index = value && value.indexOf(buttonValue);\n    var newValue;\n\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  var handleExclusiveChange = function handleExclusiveChange(event, buttonValue) {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"group\",\n    className: clsx(classes.root, className, orientation === 'vertical' && classes.vertical),\n    ref: ref\n  }, other), React.Children.map(children, function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(classes.grouped, classes[\"grouped\".concat(capitalize(orientation))], child.props.className),\n      onChange: exclusive ? handleExclusiveChange : handleChange,\n      selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n      size: child.props.size || size\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   */\n  exclusive: PropTypes.bool,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The group orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * The size of the buttons.\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiToggleButtonGroup'\n})(ToggleButtonGroup);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, withStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      borderRadius: theme.shape.borderRadius,\n      padding: 11,\n      border: \"1px solid \".concat(fade(theme.palette.action.active, 0.12)),\n      color: fade(theme.palette.action.active, 0.38),\n      '&$selected': {\n        color: theme.palette.action.active,\n        backgroundColor: fade(theme.palette.action.active, 0.12),\n        '&:hover': {\n          backgroundColor: fade(theme.palette.action.active, 0.15)\n        },\n        '& + &': {\n          borderLeft: 0,\n          marginLeft: 0\n        }\n      },\n      '&$disabled': {\n        color: fade(theme.palette.action.disabled, 0.12)\n      },\n      '&:hover': {\n        textDecoration: 'none',\n        // Reset on mouse devices\n        backgroundColor: fade(theme.palette.text.primary, 0.05),\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        },\n        '&$disabled': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Styles applied to the `label` wrapper element. */\n    label: {\n      width: '100%',\n      // Ensure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: 7,\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: {\n      padding: 15,\n      fontSize: theme.typography.pxToRem(15)\n    }\n  };\n};\nvar ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      selected = props.selected,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"disableFocusRipple\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"]);\n\n  var handleChange = function handleChange(event) {\n    if (onClick) {\n      onClick(event, value);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes[\"size\".concat(capitalize(size))]),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    \"aria-pressed\": selected\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * If `true`, the button will be rendered in an active state.\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiToggleButton'\n})(ToggleButton);","import { shape, string, bool, arrayOf, func, any } from 'prop-types';\r\n\r\nimport { icon, size } from 'components/types';\r\n\r\nconst toggleOptionItemType = shape({\r\n\t// eslint-disable-next-line react/forbid-prop-types\r\n\tvalue: any.isRequired,\r\n\tlabel: string.isRequired,\r\n\ticon,\r\n\tdisabled: bool,\r\n}).isRequired;\r\n\r\nconst toggleOptionsType = arrayOf(toggleOptionItemType);\r\n\r\nconst propTypes = {\r\n\tvalue: any.isRequired,\r\n\tonChange: func.isRequired,\r\n\t/**\r\n\t * - [\r\n\t *     {\r\n\t *         value: 'dark',\r\n\t *         label: 'Dark',\r\n\t *         icon: <DarkThemeIcon color=\"primary\" />,\r\n\t *     },\r\n\t *     {\r\n\t *         value: 'light',\r\n\t *         label: 'Light',\r\n\t *         icon: <LightThemeIcon style={{ color: yellow[500] }} />,\r\n\t *     },\r\n\t * ]\r\n\t */\r\n\toptions: toggleOptionsType.isRequired,\r\n\texclusive: bool,\r\n\tsize,\r\n};\r\n\r\nconst defaultProps = {\r\n\texclusive: true,\r\n\tsize: 'small',\r\n};\r\n\r\nexport { toggleOptionItemType, toggleOptionsType, propTypes, defaultProps };\r\n","import React from 'react';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport Spacer from 'components/Spacer';\r\nimport { getElementFromElementOrType } from 'utils/react';\r\nimport { doesNotExist } from 'utils';\r\nimport { propTypes, defaultProps } from './types';\r\n\r\n/**\r\n * Toggle for a button groups.\r\n *\r\n * @example\r\n * ```js\r\n * <Toggle\r\n * \tvalue={theme}\r\n * \tonChange={setTheme}\r\n * \toptions={[\r\n * \t\t{\r\n * \t\t\tvalue: 'dark',\r\n * \t\t\tlabel: 'Dark',\r\n * \t\t\ticon: <DarkThemeIcon color=\"primary\" />,\r\n * \t\t},\r\n * \t\t{\r\n * \t\t\tvalue: 'light',\r\n * \t\t\tlabel: 'Light',\r\n * \t\t\ticon: <LightThemeIcon style={{ color: yellow[500] }} />,\r\n * \t\t},\r\n * \t]}\r\n * />\r\n * ```\r\n *\r\n * @component\r\n * @param {...(import('@material-ui/lab').ToggleButtonGroupProps)}\r\n */\r\nconst Toggle = ({ value, onChange, options, size, ...rest }) => {\r\n\tconst handleOnChange = (_, newValue) => {\r\n\t\tif (doesNotExist(newValue) || value === newValue) return;\r\n\t\tonChange(newValue);\r\n\t};\r\n\treturn (\r\n\t\t<ToggleButtonGroup value={value} onChange={handleOnChange} {...rest}>\r\n\t\t\t{options.map(elm => (\r\n\t\t\t\t<ToggleButton\r\n\t\t\t\t\tvalue={elm.value}\r\n\t\t\t\t\tkey={elm.value}\r\n\t\t\t\t\tdisabled={elm.disabled}\r\n\t\t\t\t\tsize={size}\r\n\t\t\t\t>\r\n\t\t\t\t\t{elm.icon && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t{getElementFromElementOrType(elm.icon)}\r\n\t\t\t\t\t\t\t<Spacer direction=\"right\" />\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{elm.label}\r\n\t\t\t\t</ToggleButton>\r\n\t\t\t))}\r\n\t\t</ToggleButtonGroup>\r\n\t);\r\n};\r\n\r\nToggle.propTypes = propTypes;\r\nToggle.defaultProps = defaultProps;\r\n\r\nexport default Toggle;\r\n"],"sourceRoot":""}